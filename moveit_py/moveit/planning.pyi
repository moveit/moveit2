import types
from _typeshed import Incomplete

class LockedPlanningSceneContextManagerRO:
    def __init__(self, *args, **kwargs) -> None: ...
    def __enter__(self): ...
    def __exit__(
        self,
        type: type[BaseException] | None,
        value: BaseException | None,
        traceback: types.TracebackType | None,
    ): ...

class LockedPlanningSceneContextManagerRW:
    def __init__(self, *args, **kwargs) -> None: ...
    def __enter__(self): ...
    def __exit__(
        self,
        type: type[BaseException] | None,
        value: BaseException | None,
        traceback: types.TracebackType | None,
    ): ...

class MoveItPy:
    def __init__(self, *args, **kwargs) -> None: ...
    def execute(self, *args, **kwargs): ...
    def get_planning_component(self, *args, **kwargs): ...
    def get_planning_scene_monitor(self, *args, **kwargs): ...
    def get_robot_model(self, *args, **kwargs): ...
    def get_trajectory_execution_manager(self, *args, **kwargs): ...
    def shutdown(self, *args, **kwargs): ...

class PlanRequestParameters:
    max_acceleration_scaling_factor: Incomplete
    max_velocity_scaling_factor: Incomplete
    planner_id: Incomplete
    planning_attempts: Incomplete
    planning_pipeline: Incomplete
    planning_time: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class PlanSolution:
    def __init__(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> bool: ...
    @property
    def error_code(self): ...
    @property
    def start_state(self): ...
    @property
    def trajectory(self): ...

class PlanningComponent:
    def __init__(self, *args, **kwargs) -> None: ...
    def get_named_target_state_values(self, *args, **kwargs): ...
    def get_start_state(self, *args, **kwargs): ...
    def plan(self, *args, **kwargs): ...
    def set_goal_state(self, *args, **kwargs): ...
    def set_path_constraints(self, *args, **kwargs): ...
    def set_start_state(self, *args, **kwargs): ...
    def set_start_state_to_current_state(self, *args, **kwargs): ...
    def set_workspace(self, *args, **kwargs): ...
    def unset_workspace(self, *args, **kwargs): ...
    @property
    def named_target_states(self): ...
    @property
    def planning_group_name(self): ...

class PlanningSceneMonitor:
    def __init__(self, *args, **kwargs) -> None: ...
    def clear_octomap(self, *args, **kwargs): ...
    def new_planning_scene_message(self, *args, **kwargs): ...
    def read_only(self, *args, **kwargs): ...
    def read_write(self, *args, **kwargs): ...
    def request_planning_scene_state(self, *args, **kwargs): ...
    def start_scene_monitor(self, *args, **kwargs): ...
    def start_state_monitor(self, *args, **kwargs): ...
    def stop_scene_monitor(self, *args, **kwargs): ...
    def stop_state_monitor(self, *args, **kwargs): ...
    def update_frame_transforms(self, *args, **kwargs): ...
    def wait_for_current_robot_state(self, *args, **kwargs): ...
    @property
    def name(self): ...

class TrajectoryExecutionManager:
    def __init__(self, *args, **kwargs) -> None: ...
    def are_controllers_active(self, *args, **kwargs): ...
    def enable_execution_duration_monitoring(self, *args, **kwargs): ...
    def ensure_active_controller(self, *args, **kwargs): ...
    def ensure_active_controllers(self, *args, **kwargs): ...
    def ensure_active_controllers_for_group(self, *args, **kwargs): ...
    def ensure_active_controllers_for_joints(self, *args, **kwargs): ...
    def execute(self, *args, **kwargs): ...
    def execute_and_wait(self, *args, **kwargs): ...
    def get_last_execution_status(self, *args, **kwargs): ...
    def is_controller_active(self, *args, **kwargs): ...
    def is_managing_controllers(self, *args, **kwargs): ...
    def process_event(self, *args, **kwargs): ...
    def push(self, *args, **kwargs): ...
    def set_allowed_execution_duration_scaling(self, *args, **kwargs): ...
    def set_allowed_goal_duration_margin(self, *args, **kwargs): ...
    def set_allowed_start_tolerance(self, *args, **kwargs): ...
    def set_execution_velocity_scaling(self, *args, **kwargs): ...
    def set_wait_for_trajectory_completion(self, *args, **kwargs): ...
    def stop_execution(self, *args, **kwargs): ...
    def wait_for_execution(self, *args, **kwargs): ...
