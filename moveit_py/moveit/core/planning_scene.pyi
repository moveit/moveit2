from _typeshed import Incomplete

class PlanningScene:
    current_state: Incomplete
    name: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def apply_collision_object(self, *args, **kwargs): ...
    def check_collision(self, *args, **kwargs): ...
    def check_collision_unpadded(self, *args, **kwargs): ...
    def check_self_collision(self, *args, **kwargs): ...
    def get_frame_transform(self, *args, **kwargs): ...
    def is_path_valid(self, *args, **kwargs): ...
    def is_state_colliding(self, *args, **kwargs): ...
    def is_state_constrained(self, *args, **kwargs): ...
    def is_state_valid(self, *args, **kwargs): ...
    def knows_frame_transform(self, *args, **kwargs): ...
    def load_geometry_from_file(self, *args, **kwargs): ...
    def process_attached_collision_object(self, *args, **kwargs): ...
    def process_octomap(self, *args, **kwargs): ...
    def process_planning_scene_world(self, *args, **kwargs): ...
    def remove_all_collision_objects(self, *args, **kwargs): ...
    def save_geometry_to_file(self, *args, **kwargs): ...
    def set_object_color(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    @property
    def allowed_collision_matrix(self): ...
    @property
    def planning_frame(self): ...
    @property
    def planning_scene_message(self): ...
    @property
    def robot_model(self): ...
    @property
    def transforms(self): ...
