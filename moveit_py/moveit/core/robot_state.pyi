from typing import Any, ClassVar

class RobotState:
    state_info: ClassVar[Any] = ...  # read-only
    joint_accelerations: Any
    joint_efforts: Any
    joint_positions: Any
    joint_velocities: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def clear_attached_bodies(self, *args, **kwargs) -> Any: ...
    def get_frame_transform(self, *args, **kwargs) -> Any: ...
    def get_global_link_transform(self, *args, **kwargs) -> Any: ...
    def get_jacobian(self, *args, **kwargs) -> Any: ...
    def get_joint_group_accelerations(self, *args, **kwargs) -> Any: ...
    def get_joint_group_positions(self, *args, **kwargs) -> Any: ...
    def get_joint_group_velocities(self, *args, **kwargs) -> Any: ...
    def get_pose(self, *args, **kwargs) -> Any: ...
    def set_from_ik(self, *args, **kwargs) -> Any: ...
    def set_joint_group_accelerations(self, *args, **kwargs) -> Any: ...
    def set_joint_group_active_positions(self, *args, **kwargs) -> Any: ...
    def set_joint_group_positions(self, *args, **kwargs) -> Any: ...
    def set_joint_group_velocities(self, *args, **kwargs) -> Any: ...
    def set_to_default_values(self, *args, **kwargs) -> Any: ...
    def set_to_random_positions(self, *args, **kwargs) -> Any: ...
    def update(self, *args, **kwargs) -> Any: ...
    def __copy__(self) -> Any: ...
    def __deepcopy__(self) -> Any: ...
    @property
    def dirty(self) -> Any: ...
    @property
    def robot_model(self) -> Any: ...
    @property
    def state_tree(self) -> Any: ...

def robotStateToRobotStateMsg(*args, **kwargs) -> Any: ...
